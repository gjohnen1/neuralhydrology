# --- Experiment configurations --------------------------------------------------------------------

# experiment name, used as folder name
experiment_name: single_basin_run

# files to specify training, validation and test basins (relative to code root or absolute path)
train_basin_file: 1_basin.txt
validation_basin_file: 1_basin.txt
test_basin_file: 1_basin.txt

# training, validation and test time periods (format = 'dd/mm/yyyy')
train_start_date: "01/11/1979"
train_end_date: "30/09/2015"
validation_start_date: "01/10/2015"
validation_end_date: "30/09/2018"
test_start_date: "01/10/2018"
test_end_date: "31/12/2020"

# which GPU (id) to use [in format of cuda:0, cuda:1 etc, or cpu or None]
device: cuda:0

# --- Validation configuration ---------------------------------------------------------------------

# specify after how many epochs to perform validation
validate_every: 3

# specify how many random basins to use for validation
validate_n_random_basins: 1

# specify which metrics to calculate during validation (see neuralhydrology.evaluation.metrics)
# this can either be a list or a dictionary. If a dictionary is used, the inner keys must match the name of the
# target_variable specified below. Using dicts allows for different metrics per target variable.
metrics:
  - NSE

# --- Model configuration --------------------------------------------------------------------------

# base model type [lstm, ealstm, cudalstm, embcudalstm, mtslstm]
# (has to match the if statement in modelzoo/__init__.py)
model: cudalstm

# prediction head [regression]. Define the head specific parameters below
head: regression

# ----> Regression settings <----
output_activation: linear

# ----> General settings <----

# Number of cell states of the LSTM
hidden_size: 20

# Initial bias value of the forget gate
initial_forget_bias: 3

# Dropout applied to the output of the LSTM
output_dropout: 0.4

# --- Training configuration -----------------------------------------------------------------------

# specify optimizer [Adam]
optimizer: Adam

# specify loss [MSE, NSE, RMSE]
loss: MSE

# specify learning rates to use starting at specific epochs (0 is the initial learning rate)
learning_rate:
  0: 1e-2
  30: 5e-3
  40: 1e-3

# Mini-batch size
batch_size: 256

# Number of training epochs
epochs: 50

# If a value, clips the gradients during training to that norm.
clip_gradient_norm: 1

# Defines which time steps are used to calculate the loss. Can't be larger than seq_length.
# If use_frequencies is used, this needs to be a dict mapping each frequency to a predict_last_n-value, else an int.
predict_last_n: 1

# Length of the input sequence
# If use_frequencies is used, this needs to be a dict mapping each frequency to a seq_length, else an int.
seq_length: 365

# Number of parallel workers used in the data pipeline
num_workers: 8

# Log the training loss every n steps
log_interval: 5

# If true, writes logging results into tensorboard file
log_tensorboard: True

# If a value and greater than 0, logs n random basins as figures during validation
log_n_figures: 1

# Save model weights every n epochs
save_weights_every: 1

# --- Data configurations --------------------------------------------------------------------------

# which data set to use [camels_us, camels_gb, global, hourly_camels_us]
dataset: camels_de

# Path to data set root
data_dir: ../data/camels_de

dynamic_inputs:
  - precipitation_mean
  - precipitation_min
  - precipitation_max
  - humidity_mean
  - humidity_min
  - humidity_max
  - radiation_global_mean
  - radiation_global_min
  - radiation_global_max
  - temperature_mean
  - temperature_min
  - temperature_max

# which columns to use as target
target_variables:
  - discharge_vol

static_attributes:
  - p_mean
  - p_seasonality
  - aquitard_perc
  - aquifer_perc
  - artificial_surfaces_perc
  - agricultural_areas_perc
  - forests_and_seminatural_areas_perc
  - wetlands_perc
  - q_mean
  - runoff_ratio
  - slope_fdc